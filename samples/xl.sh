#!/usr/bin/env sh

################################################################################
# Generated by sogen {

sogen_init() {
	sogen_help=
	sogen_dump=
	version=
	verbose=
	without_help=
	output=
	file=defaultfile
	ft_from="mySource is my source"
	ft_to=myTarget
	u=
	v=
	w=
	x_p1=
	x_p2=
	y_p1=
	y_p2=
	z=
	z_p2=
}

sogen_help() {
	cat <<-"HELP"
		Usage: l [option...] FILE...
		
		Positional arguments:
		FILE: File to be processed
		
		Optional arguments:
		  -h, --help             Display this help text and exit
		      --sogen-dump       Dump arguments and exit
		      --version          show version
		      --verbose          more verbose output
		      --without-help     
		  -o FILE                Output to FILE
		                         2nd help line
		  -i, --input=FILE       >    Indented: Input from FILE
		                         2nd help line
		      --from-to FROM TO  copy from FROM to TO
		                         a 2nd help line
		                         and a third one.
		                         >    An indented help line
		  -u                     
		  -v                     
		  -w                     
		  -x p1 p2               Some helptext
		  -y p1 p2               Some helptext
		  -z p1 p2               Some helptext
		                                       The footer very indented
		This is some text at the end of help.
		It can be non-indented ...
		  or indented ...
		or non-indented with '|' inside the text ...
		or non-indented with leading '|' ...
		  or indented with '|' inside the text ...
		| and also start with a '|' ...
		| or even start with a '|' and have another '|' somwehere.
		One special case is a trailing '|'|
		  another one a trailing '|' with a leading one|
		  another one lots of '|' like these three ||| plus |
		And of course a trailing '|' without a leading one |
		And of course a trailing '|' without a leading one in addition to preceeding '|' ||| like those before |
		
	HELP
}

sogen_dump() {
	echo "-h, --help:              sogen_help=              '${sogen_help}'"
	echo "--sogen-dump:            sogen_dump=              '${sogen_dump}'"
	echo "--version:               version=                 '${version}'"
	echo "--verbose:               verbose=                 '${verbose}'"
	echo "--without-help:          without_help=            '${without_help}'"
	echo "-o:                      output=                  '${output}'"
	echo "-i, --input:             file=                    '${file}'"
	echo "--from-to:               ft_from=                 '${ft_from}'"
	echo "--from-to:               ft_to=                   '${ft_to}'"
	echo "-u:                      u=                       '${u}'"
	echo "-v:                      v=                       '${v}'"
	echo "-w:                      w=                       '${w}'"
	echo "-x:                      x_p1=                    '${x_p1}'"
	echo "-x:                      x_p2=                    '${x_p2}'"
	echo "-y:                      y_p1=                    '${y_p1}'"
	echo "-y:                      y_p2=                    '${y_p2}'"
	echo "-z:                      z=                       '${z}'"
	echo "-z:                      z_p2=                    '${z_p2}'"
	echo 'POSITIONAL ARGUMENTS:'
	for a in "$@"; do
		if [ "${a// /}" == "$a" ]; then
			printf "%s " "$a"
		else
			printf "'%s' " "$a"
		fi
	done
	echo
}

sogen_die() {
    echo "ERROR: $1" >&2
    echo >&2
    sogen_help >&2
    exit 1
}
sogen_init

while :; do
	case "$1" in
			-h|--help)
				sogen_help=true
				;;
			--sogen-dump)
				sogen_dump=true
				;;
			--version)
				version=true
				;;
			--verbose)
				verbose=true
				;;
			--without-help)
				without_help=true
				;;
			-o)
			shift
			[ "$1" ] || sogen_die "--output requires 1 more argument(s): FILE"
			printf -v "output" "$1"
				;;
			-i|--input)
			shift
			[ "$1" ] || sogen_die "--input requires 1 more argument(s): FILE"
			printf -v "file" "$1"
				;;
		--input=?*)
			printf -v "file" "${1#*=}"
			;;
		--input=)
			[ "$1" ] || sogen_die "--input requires 1 more argument(s): FILE"
			;;
			--from-to)
			shift
			[ "$1" ] || sogen_die "--ft requires 2 more argument(s): FROM"
			printf -v "ft_from" "$1"
			shift
			[ "$1" ] || sogen_die "--ft requires 1 more argument(s): TO"
			printf -v "ft_to" "$1"
				;;
			-u)
				u=true
				;;
			-v)
				v=true
				;;
			-w)
				w=true
				;;
			-x)
			shift
			[ "$1" ] || sogen_die "--x requires 2 more argument(s): p1"
			printf -v "x_p1" "$1"
			shift
			[ "$1" ] || sogen_die "--x requires 1 more argument(s): p2"
			printf -v "x_p2" "$1"
				;;
			-y)
			shift
			[ "$1" ] || sogen_die "--y requires 2 more argument(s): p1"
			printf -v "y_p1" "$1"
			shift
			[ "$1" ] || sogen_die "--y requires 1 more argument(s): p2"
			printf -v "y_p2" "$1"
				;;
			-z)
			shift
			[ "$1" ] || sogen_die "--z requires 2 more argument(s): p1"
			printf -v "z" "$1"
			shift
			[ "$1" ] || sogen_die "--z requires 1 more argument(s): p2"
			printf -v "z_p2" "$1"
				;;
		--?*)
			sogen_die "unsupported option $1"
			;;
		--)
			shift
			break
			;;
		-??*)
			_sogen_mopt=$1
			shift
			for (( i=((${#_sogen_mopt}-1)); i>=1; i-- )); do
				set -- "-${_sogen_mopt:$i:1}" "$@"
			done
			# unshift because the end of the loop will shift again:
			set -- "${_sogen_mopt}" "$@"
			;;
		-?*)
			sogen_die "unsupported option $1"
			;;
		*)
			break
			;;
	esac
	shift
done

if [ "$sogen_help" ]; then
	sogen_help
	exit 0
fi

if [ "$sogen_dump" ]; then
	sogen_dump "$@"
	exit 0
fi

# End of sogen-generated code }
################################################################################
